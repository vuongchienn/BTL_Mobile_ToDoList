import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/user_model.dart';

class AuthRemoteDataSource {
  final Dio dio;
  AuthRemoteDataSource(this.dio);

  /// POST /auth/login
  /// Laravel tr·∫£ v·ªÅ: { status: true, message: 'Login successful', data: '<token>' }
 Future<void> login(String email, String password) async {
  try {
    final response = await dio.post('/auth/login', data: {
      'email': email,
      'password': password,
    });

    print("Login response: ${response.data}");

    // Token Laravel tr·∫£ n·∫±m ·ªü response.data['data']
    String? token;
    if (response.data is Map<String, dynamic>) {
      token = response.data['data']?.toString();
    }

    if (token == null || token.isEmpty) {
      throw Exception("Token null ho·∫∑c r·ªóng");
    }

    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('token', token);

    print("Token l∆∞u th√†nh c√¥ng: $token");
  } catch (e) {
    print("Login error: $e");
    throw Exception("L·ªói khi ƒëƒÉng nh·∫≠p: $e");
  }
}
  
  /// L·∫•y profile user (n·∫øu b·∫°n ch∆∞a c√≥ API /auth/user th√¨ t·∫°m b·ªè ho·∫∑c test sau)
 Future<UserModel> getProfile() async {
  final prefs = await SharedPreferences.getInstance();
  final token = prefs.getString('token');
  if (token == null) throw Exception('Ch∆∞a c√≥ token');

  dio.options.headers['Authorization'] = 'Bearer $token';

  final response = await dio.get('/auth/user');
  if (response.statusCode == 200) {
    final data = response.data;
    if (data is Map<String, dynamic> && data.containsKey('data')) {
      return UserModel.fromJson(data['data']);
    }
    return UserModel.fromJson(data);
  } else {
    throw Exception('Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng');
  }
}

  /// POST /auth/logout
  Future<void> logout() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');
    if (token == null) return;

    dio.options.headers['Authorization'] = 'Bearer $token';
    try {
      await dio.post('/auth/logout');
    } catch (e) {
      print('‚ö†Ô∏è L·ªói khi logout (c√≥ th·ªÉ token ƒë√£ h·∫øt h·∫°n)');
    }

    // Xo√° token kh·ªèi local
    await prefs.remove('token');
    dio.options.headers.remove('Authorization');

    print('üëã ƒê√£ ƒëƒÉng xu·∫•t');
  }
}